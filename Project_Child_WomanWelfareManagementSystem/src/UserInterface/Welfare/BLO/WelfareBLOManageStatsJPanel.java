/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Welfare.BLO;

import Business.EcoSystem;
import Business.Enterprise.WelfareEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WelfareCentre.WelfareCentre;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author user
 */
public class WelfareBLOManageStatsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form WelfareBLOManageStatsJPanel
     */
    JPanel userProcessContainer;
    EcoSystem system; 
    WelfareEnterprise enterprise;
    Organization organization;
    UserAccount account;
    Network network;
    public WelfareBLOManageStatsJPanel(JPanel userProcessContainer, WelfareEnterprise enterprise, Organization organization,EcoSystem system, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.system=system;
        this.organization=organization;
        this.account= account;
        network = GetNetwork();
    }
    private Network GetNetwork(){
        Network thisNetwork = null;
        for(Network net: system.getNetworkList()){
            for(WelfareEnterprise wel : net.getEnterpriseDirectory().getWelfareEnterpriseList()){
                if(enterprise.equals(wel)){
                    thisNetwork= net;
                }
            }
        }
        return thisNetwork;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnWelfare = new javax.swing.JButton();
        btnPatients = new javax.swing.JButton();

        btnWelfare.setText("Welfare Centres");
        btnWelfare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWelfareActionPerformed(evt);
            }
        });

        btnPatients.setText("Patients");
        btnPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnWelfare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPatients, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(194, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(btnWelfare)
                .addGap(18, 18, 18)
                .addComponent(btnPatients)
                .addContainerGap(159, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientsActionPerformed
        ArrayList<String> services = new ArrayList<>();
        for(WelfareCentre centre : network.getCentreDir().getWelfareCentreList()){
            for(Patient pat :centre.getPatientList()){
                services.add(pat.getServiceProvided());
            }
        }
        DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
        for(String ser : services){
        dataSet.setValue(80, "Patients", ser);
        }
    }//GEN-LAST:event_btnPatientsActionPerformed

    private void btnWelfareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWelfareActionPerformed
        Map<WelfareCentre, Integer> centrePat = new HashMap<WelfareCentre, Integer>();
        for(WelfareCentre centre : network.getCentreDir().getWelfareCentreList()){
            centrePat.put(centre, centre.getPatientList().size());
        }
        DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
        for(Map.Entry<WelfareCentre, Integer> entry : centrePat.entrySet()){
            dataSet.addValue(entry.getValue(), entry.getKey().getName(), "Number of Patients");
        }
        JFreeChart chart = ChartFactory.createBarChart("Number Of Patients", "Welfare Centres", "Patients", dataSet, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Welfare Centre", chart);
        frame.setVisible(true);
        frame.setSize(450,350);
    }//GEN-LAST:event_btnWelfareActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPatients;
    private javax.swing.JButton btnWelfare;
    // End of variables declaration//GEN-END:variables
}
